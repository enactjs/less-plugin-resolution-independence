require('chai').should();

var ResolutionIndependence = require('../lib/resolution-independence'),
	Less = require('../node_modules/less/lib/less');

describe('resolution-independence options', function () {
	var RezInd, opts, riPlugin, node;

	before(function () {
		// TODO: we initialize the plugin with a dummy LESS object for now, so that we can test
		// specific methods of the plugin (this is done using a mock LESS node) - ideally we will
		// test with the actual nodes generated by LESS, in case the format changes, but this will
		// require the likely creation of a plugin to hook into the returned nodes from LESS, in
		// order to test this plugin...
		RezInd = new ResolutionIndependence(new Less());
	});

	beforeEach(function () {
		node = {
			value: {
				value: 48,
				unit: {
					numerator: ['px']
				}
			}
		};

		opts = {
			baseSize: 24,
			riUnit: 'rem',
			unit: 'px',
			absoluteUnit: 'apx',
			minUnitSize: 1,
			minSize: 16,
			precision: 5
		};
	});

	afterEach(function () {
		riPlugin = null;
	});

	after(function () {
		riPlugin = null;
		node = null;
		opts = null;
	});

	it('should handle the baseSize option', function () {
		opts.baseSize = 32;
		riPlugin = new RezInd(opts);
		riPlugin.visitRule(node);
		node.value.value.should.equal(1.5);
		node.value.unit.numerator[0].should.equal('rem');
	});

	it('should handle the riUnit option', function () {
		opts.riUnit = 'vh';
		riPlugin = new RezInd(opts);
		riPlugin.visitRule(node);
		node.value.value.should.equal(2);
		node.value.unit.numerator[0].should.equal('vh');
	});

	it('should handle the unit option', function () {
		opts.unit = 'em';
		node.value.unit.numerator[0] = 'em';
		riPlugin = new RezInd(opts);
		riPlugin.visitRule(node);
		node.value.value.should.equal(2);
		node.value.unit.numerator[0].should.equal('rem');
	});

	it('should handle the absoluteUnit option', function () {
		opts.absoluteUnit = 'abspx';
		node.value.unit.numerator[0] = 'abspx';
		riPlugin = new RezInd(opts);
		riPlugin.visitRule(node);
		node.value.value.should.equal(48);
		node.value.unit.numerator[0].should.equal('px');
	});

	it('should handle a minUnitSize option value of 0', function () {
		opts.minUnitSize = 0;
		node.value.value = 0.24;
		riPlugin = new RezInd(opts);
		riPlugin.visitRule(node);
		node.value.value.should.equal(0.01);
		node.value.unit.numerator[0].should.equal('rem');
	});

	it('should handle the minUnitSize option', function () {
		opts.minUnitSize = 10;
		node.value.value = 9;
		riPlugin = new RezInd(opts);
		riPlugin.visitRule(node);
		node.value.value.should.equal(9);
		node.value.unit.numerator[0].should.equal('px');
	});

	it('should handle the minSize option', function () {
		opts.minSize = 12;
		opts.minUnitSize = 24;
		riPlugin = new RezInd(opts);
		riPlugin.visitRule(node);
		node.value.value.should.equal(24);
		node.value.unit.numerator[0].should.equal('px');
	});

	it('should handle the precision option', function () {
		opts.baseSize = 33;
		opts.precision = 2;
		riPlugin = new RezInd(opts);
		riPlugin.visitRule(node);
		node.value.value.should.equal(1.45);
		node.value.unit.numerator[0].should.equal('rem');
	});

});

describe('resolution-independence conversions', function () {
	var RezInd, riPlugin, opts;

	before(function () {
		// TODO: we initialize the plugin with a dummy LESS object for now, so that we can test
		// specific methods of the plugin (this is done using a mock LESS node) - ideally we will
		// test with the actual nodes generated by LESS, in case the format changes, but this will
		// require the likely creation of a plugin to hook into the returned nodes from LESS, in
		// order to test this plugin...
		RezInd = new ResolutionIndependence(new Less());

		opts = {
			baseSize: 24,
			riUnit: 'rem',
			unit: 'px',
			absoluteUnit: 'apx',
			minUnitSize: 1,
			minSize: 16,
			precision: 5
		};

		riPlugin = new RezInd(opts);
	});

	it('should convert single string values', function () {
		// width: 48px;
		var node = {
			name: 'width',
			value: {
				value: '48px'
			}
		};
		riPlugin.visitRule(node);
		node.value.value.should.equal('2rem');
	});

	it('should convert complex string values (url that contains delimiters)', function () {
		// background: url("https://developer.mozilla.org/samples/cssref/images/startransparent.gif") #FFEE99 48px bottom no-repeat;
		var node = {
			name: 'background',
			value: {
				value: 'url("https://developer.mozilla.org/samples/cssref/images/startransparent.gif") #FFEE99 48px bottom no-repeat'
			}
		};
		riPlugin.visitRule(node);
		node.value.value.should.equal('url("https://developer.mozilla.org/samples/cssref/images/startransparent.gif") #FFEE99 2rem bottom no-repeat');
	});

	it('should convert complex string values (lack of whitespace, comma-separated)', function () {
		// background-size: 48px 2.4px,36px.24px!important;
		var node = {
			name: 'background-size',
			value: {
				value: '48px 2.4px,36px.24px!important'
			}
		};
		riPlugin.visitRule(node);
		node.value.value.should.equal('2rem 0.1rem, 1.5rem 0.24px !important');
	});

	it('should convert function parameters', function () {
		// transform: translate3d(48px, 36px, 18px);
		var node = {
			value: {
				name: 'transform',
				args: [
					{
						value: '48',
						unit: {
							numerator: ['px']
						}
					},
					{
						value: '36',
						unit: {
							numerator: ['px']
						}
					},
					{
						value: '18',
						unit: {
							numerator: ['px']
						}
					}
				]
			}
		};

		riPlugin.visitRule(node);

		node.value.args[0].value.should.equal(2);
		node.value.args[1].value.should.equal(1.5);
		node.value.args[2].value.should.equal(0.75);

		node.value.args[0].unit.numerator[0].should.equal('rem');
		node.value.args[1].unit.numerator[0].should.equal('rem');
		node.value.args[2].unit.numerator[0].should.equal('rem');
	});

	it('should convert nested function parameters', function () {
		// -webkit-mask-image: -webkit-linear-gradient(top, rgba(0,255,255,0), rgba(255,255,0,1) 18px, rgba(255,255,0,0) 60px, rgba(0,255,255,0));
		var node = {
			name: '-webkit-linear-gradient',
			value: {
				args: [
					{ value: 'top' },
					{ rgb: [ 0, 255, 255 ], alpha: 0 },
					{
						value: [
							{
								rgb: [ 255, 255, 0 ],
								alpha: 1
							},
							{
								value: 18,
								unit: {
									numerator: [ 'px' ]
								}
							}
						]
					},
					{
						value: [
							{
								rgb: [ 255, 255, 0 ],
								alpha: 0
							},
							{
								value: 60,
								unit: {
									numerator: [ 'px' ]
								}
							}
						]
					},
					{ rgb: [ 0, 255, 255 ], alpha: 0 }
				]
			}
		};

		riPlugin.visitRule(node);

		node.value.args[0].value.should.equal('top');

		node.value.args[1].rgb[0].should.equal(0);
		node.value.args[1].rgb[1].should.equal(255);
		node.value.args[1].rgb[2].should.equal(255);
		node.value.args[1].alpha.should.equal(0);

		node.value.args[2].value[0].rgb[0].should.equal(255);
		node.value.args[2].value[0].rgb[1].should.equal(255);
		node.value.args[2].value[0].rgb[2].should.equal(0);
		node.value.args[2].value[0].alpha.should.equal(1);
		node.value.args[2].value[1].value.should.equal(0.75);
		node.value.args[2].value[1].unit.numerator[0].should.equal('rem');

		node.value.args[3].value[0].rgb[0].should.equal(255);
		node.value.args[3].value[0].rgb[1].should.equal(255);
		node.value.args[3].value[0].rgb[2].should.equal(0);
		node.value.args[3].value[0].alpha.should.equal(0);
		node.value.args[3].value[1].value.should.equal(2.5);
		node.value.args[3].value[1].unit.numerator[0].should.equal('rem');

		node.value.args[4].rgb[0].should.equal(0);
		node.value.args[4].rgb[1].should.equal(255);
		node.value.args[4].rgb[2].should.equal(255);
		node.value.args[4].alpha.should.equal(0);
	});

	it('should ignore unit-less values', function () {
		// opacity: 0.5;
		var node = {
			name: 'opacity',
			value: {
				value: 0.5
			}
		};
		riPlugin.visitRule(node);
		node.value.value.should.equal(0.5);
	});

	it('should ignore alternative measurement units', function () {
		// width: 50%;
		var node = {
			name: 'width',
			value: {
				value: '50%'
			}
		};
		riPlugin.visitRule(node);
		node.value.value.should.equal('50%');
	});

	it('should properly handle properties without measurement values that accept csv\'s', function () {
		// background: rgba(50, 50, 50, 0.8);
		var node = {
			name: 'background',
			value: {
				rgb: [ 50, 50, 50 ],
				alpha: 0.8
			}
		};
		riPlugin.visitRule(node);
		node.value.rgb[0].should.equal(50);
		node.value.rgb[1].should.equal(50);
		node.value.rgb[2].should.equal(50);
		node.value.alpha.should.equal(0.8);
	});

});
